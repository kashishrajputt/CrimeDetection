# -*- coding: utf-8 -*-
"""CrimeZoneClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j_MLm5oe5vH2Cmozs51L6rWlp54GjFJT
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score
import folium
from folium.plugins import HeatMap
import joblib

# Load the dataset
df = pd.read_csv('crime_data_delhi_with_coordinates.csv')

# Sum up the relevant crime columns to get the total crime score
crime_columns = [
    'Crime on Streets', 'Street Theft', 'Molestation on Roads',
    'Harassment Cases', 'Eve Teasing', 'Kidnapping & Abduction of Women',
    'Acid Attack', 'Attempt to Acid Attack', 'Murder with Rape/Gang Rape'
]
df['Total_Crime'] = df[crime_columns].sum(axis=1)

# Define the thresholds for the zones based on crime data
red_zone_threshold = df['Total_Crime'].quantile(0.66)  # Top 33% (Red)
green_zone_threshold = df['Total_Crime'].quantile(0.33)  # Bottom 33% (Green)

# Create a new column 'Zone' based on crime thresholds
def categorize_zone(row):
    if row['Total_Crime'] >= red_zone_threshold:
        return 'Red'      # Red Zone: Top 33%
    elif row['Total_Crime'] <= green_zone_threshold:
        return 'Green'    # Green Zone: Bottom 33%
    else:
        return 'Yellow'   # Yellow Zone: Middle 34%

# Apply the categorization function to the dataframe
df['Zone'] = df.apply(categorize_zone, axis=1)

# Check the distribution of zones
print(df['Zone'].value_counts())

# Features and target
X = df[['Total_Crime']]
y = df['Zone']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Decision Tree Classifier
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

# Check if Latitude and Longitude are valid numeric values
df = df.dropna(subset=['Latitude', 'Longitude'])  # Drop rows with NaN values in Latitude/Longitude columns
df = df[df['Latitude'].apply(lambda x: isinstance(x, (int, float))) & df['Longitude'].apply(lambda x: isinstance(x, (int, float)))]

# Create a map centered around Delhi
delhi_map = folium.Map(location=[28.6139, 77.2090], zoom_start=11)

# Create an empty list to hold the heatmap data
heatmap_data = []

# Assign intensity values based on zone
zone_intensity = {
    'Red': 3,       # Higher intensity for Red zone
    'Yellow': 2,    # Medium intensity for Yellow zone
    'Green': 1      # Lower intensity for Green zone
}

# Add heatmap data based on the zone intensity
for index, row in df.iterrows():
    intensity = zone_intensity.get(row['Zone'], 1)  # Default to Green if zone not found
    heatmap_data.append([row['Latitude'], row['Longitude'], intensity])

# Check the heatmap data to ensure proper structure
print(heatmap_data[:5])  # Print first 5 entries for verification

# Add the heatmap to the map
HeatMap(heatmap_data).add_to(delhi_map)

# Save the map to an HTML file
delhi_map.save('delhi_crime_heatmap.html')

# Display the map in the Jupyter Notebook
delhi_map



# Assuming `model` is your trained model
joblib.dump(model, 'crime_zone_model.pkl')

